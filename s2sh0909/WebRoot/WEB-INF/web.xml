<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">
  <display-name></display-name>	
  <!-- 
  		*  spring容器是以监听器的形式整合到web服务器中的
  		   * spring容器的配置文件的路径
  		      * 可以写到WEB-INF中
  		         	默认路径：/WEB-INF/applicationContext.xml
  		         	也可以这么写：
  		         	       WEB-INF/*Context.xml
  		         	       WEB-INF/spring*.xml
  		         	       WEB-INF/&#42;&#42;/*Context.xml
  		   *  
  		     //加载spring的配置文件
  		     this.contextLoader = createContextLoader();
  		     //创建spring容器，启动spring容器
  		     //因为service层和dao层的类在spring容器中都是单例模式配置，在spring容器启动的时候
  		       dao层和service层所有的类就创建对象了，包括service层代理对象
  		                  在spring容器启动的时候，action层并没有创建对象，因为action对象是多例的，所以spring容器
  		                  不负责销毁
		     this.contextLoader.initWebApplicationContext(event.getServletContext());
   -->
  <listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/applicationContext.xml</param-value>
	</context-param>
  
  <filter>
		<filter-name>struts2</filter-name>
		<filter-class>org.apache.struts2.dispatcher.ng.filter.StrutsPrepareAndExecuteFilter</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>struts2</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
</web-app>
